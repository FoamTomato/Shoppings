package com.sybinal.shop.controller.admin;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class SignDemo {
	
	public static final String HMAC_SHA1 = "HmacSHA1";
	public static final String CHARSET_NAME_UTF8 = "UTF-8";
	public static final char[] digital = "0123456789ABCDEF".toCharArray();
	public static final String DEFAULT_DATA_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
	
	/**
	 * 程序入口
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		/*String apiurl="http://vakind.f3322.org:10008/api/logistics/v1/track/lable/download";//http 请求路径

		String paramer="{\"lableKey\":\"1_1159279533531246593\"}";
		Map<String, String> head = Maps.newHashMap();
		head.put("SE-TOKEN", "93a61c53-e6a3-4f13-ad0b-594498a49c45");
		head.put("signature","52AD1BA7767405EF86295D9824A1AE0BA795B7B0");//getSign(apiurl,"token",paramer,"POST")
		head.put("Content-Type", "application/json");
		//http请求请求
		String doPost = HttpUtils.doPost(apiurl, paramer, head,EnumContentType.JSON, 30000);*/
	}
	
	/**
	 * 签名
	 * @param url　　httpＵＲＬ
	 * @param token token
	 * @param content json 签名字符串
	 * @param method　　http　请求方法类型
	 * @return
	 */
	/*static String getSign(String url,String token, String content,String method) {
		final StringBuilder sbuilder = new StringBuilder();
		Gson gson=new Gson();
		if (method.equals("POST")) {
			if (null != content && content.length() > 0) {
				try {
					final String jnode = gson.toJson(content);
					if (jnode.isArray()) {
						int i=0;
						Iterator<JsonNode> iters = jnode.iterator();
						while(iters.hasNext()){
							sbuilder.append(i+iters.next().toString());
							i++;
						}
					} else {
						Map<?, ?> bodymap = JsonH.toObject(content, Map.class); 
						bodymap.keySet().stream().sorted().forEach(new Consumer<Object>() {
							@Override
							public void accept(Object p) {
								sbuilder.append(p);
								if (jnode.get(String.valueOf(p)) != null
										&& jnode.get(String.valueOf(p)).asText() != "null") {
									if (jnode.get(String.valueOf(p)).isObject()
											|| jnode.get(String.valueOf(p)).isArray())
										sbuilder.append(jnode.get(String.valueOf(p)).toString());
									else
										sbuilder.append(jnode.get(String.valueOf(p)).asText());
								}
							}
						});
					}
				} catch (Exception ex) {
					sbuilder.append(content);
//					logger.error("get body data error: ", ex);
				}
			}
		}
		String urlpath = url.substring(url.indexOf("/api") + 1);
		return hmacSha1ToHexStr(urlpath + sbuilder.toString(), token);
	}*/
	
	
	/*public static String hmacSha1ToHexStr(String str, String key) {
		try {
			byte[] data = str.getBytes(CHARSET_NAME_UTF8);
			return hmacSha1ToHexStr(data, key.getBytes(CHARSET_NAME_UTF8), 0, data.length);
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
	}*/
	
	
	/*public static String hmacSha1ToHexStr(byte[] data, byte[] key, int offset, int len) {
		byte[] rawHmac = hmacSha1(data, key, offset, len);
		return StringUtil.encodeHexStr(rawHmac);
	}*/
	
	/**
	 * HMAC
	 */
	public static byte[] hmacSha1(byte[] data, byte[] key, int offset, int len) {
		SecretKeySpec signingKey = new SecretKeySpec(key, HMAC_SHA1);
		Mac mac = null;
		try {
			mac = Mac.getInstance(HMAC_SHA1);
			mac.init(signingKey);
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e.getMessage(), e);
		} catch (InvalidKeyException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		mac.update(data, offset, len);
		return mac.doFinal();
	}

}
