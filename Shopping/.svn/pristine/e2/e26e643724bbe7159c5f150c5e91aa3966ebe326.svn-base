package com.sybinal.shop.common;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sybinal.shop.model.OnlineDownloadWithBLOBs;

import sun.misc.BASE64Encoder;

public class SrcUrlImg {

	private Logger log = LoggerFactory.getLogger(SrcUrlImg.class);

	public static void main(String[] args) {
		/*
		 * String url =
		 * "https://images-na.ssl-images-amazon.com/images/I/515Hv6ihZsL._SL1024_.jpg";
		 * String c = downloadPicture(url, "testg"); System.out.println(c);
		 */
		/*
		 * for (int i = 0; i < 100; i++) { System.out.println(rando()); }
		 */
		// String url =
		// "https://images-na.ssl-images-amazon.com/images/I/515Hv6ihZsL._SL1024_.jpg";
		// String c = downloadPictures(null, null, null);
		/*
		 * ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();//
		 * 创建线程池 Future<?> future = newCachedThreadPool.submit(new imgTest(
		 * "https://images-na.ssl-images-amazon.com/images/I/51z5YjC9nhL._SL1024_.jpg",
		 * "F://test.jpg"));// 线程池中提交MyCallable // 判断任务是否完成 boolean c = future.isDone();
		 * System.out.println(c); if (!c) { System.out.println("請等待"); } try {
		 * System.out.println(future.get()); } catch (InterruptedException |
		 * ExecutionException e) { // TODO Auto-generated catch block
		 * e.printStackTrace(); } finally { newCachedThreadPool.shutdown(); }
		 */
		OnlineDownloadWithBLOBs Onlines = new OnlineDownloadWithBLOBs();
		ExecutorService newCachedThreadPool = Executors.newFixedThreadPool(10);
		int threadCount = ((ThreadPoolExecutor) newCachedThreadPool).getActiveCount();

		System.out.println("1.threadCount====" + threadCount);
	}

	// 随机数
	public static int rando() {
		Random rd = new Random();
		int ran = rd.nextInt(10000);

		return ran;

	}

	// 链接url下载图片
	public String downloadPictures(String path, String uuid, String urlList) {
		URL url = null;
		//int imageNumber = 0;
		try {
			url = new URL(urlList);
			DataInputStream dataInputStream = new DataInputStream(url.openStream());
			// String imageNames = imageName + Name + sdfs.format(new Date()) + ".jpg";
			FileOutputStream fileOutputStream = new FileOutputStream(path + uuid + ".jpg");
			ByteArrayOutputStream output = new ByteArrayOutputStream();

			byte[] buffer = new byte[1024];
			int length;

			while ((length = dataInputStream.read(buffer)) > 0) {
				output.write(buffer, 0, length);
			}
			byte[] context = output.toByteArray();
			fileOutputStream.write(context);
			dataInputStream.close();
			fileOutputStream.close();
		} catch (MalformedURLException e) {
			log.error("链接错误",e);
			return urlList;
		} catch (IOException e) {
			log.info(urlList+"下载失败");
		}
		return  uuid + ".jpg";
	}

	// 链接url下载图片
	public String downloadPicture(String urlList, String imageNames, String fsku) {
		URL url = null;
		int imageNumber = 0;

		try {
			url = new URL(urlList);
			DataInputStream dataInputStream = new DataInputStream(url.openStream());

			// String imageNames = imageName + Name + sdfs.format(new Date()) + ".jpg";
			FileOutputStream fileOutputStream = new FileOutputStream(new File(imageNames));
			ByteArrayOutputStream output = new ByteArrayOutputStream();

			byte[] buffer = new byte[1024];
			int length;
			while ((length = dataInputStream.read(buffer)) > 0) {
				output.write(buffer, 0, length);
			}
			byte[] context = output.toByteArray();
			fileOutputStream.write(output.toByteArray());
			dataInputStream.close();
			fileOutputStream.close();

			return imageNames;
		} catch (MalformedURLException e) {
			System.out.println("链接错误");

			log.error(fsku + "链接错误==>" + imageNames, imageNames);
			log.warn(fsku + ",", imageNames);
			e.printStackTrace();
		} catch (IOException e) {

			log.error(fsku + "io流传输异常==>" + imageNames, imageNames);
			log.warn(fsku + ",", imageNames);
			System.out.println("io流传输异常" + imageNames);
			e.printStackTrace();
		}
		return "失败";
	}

	public static String urlToString(String imgUrl) {
		byte[] result = null;
		InputStream inStream = null;
		String photo = "";
		Logger log = null;
		// 创建URL
		try {
			URL url = new URL(imgUrl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			// 创建连接
			conn.setRequestMethod("GET");
			conn.setConnectTimeout(5 * 100000);
			conn.setReadTimeout(500000);
			conn.setRequestProperty("Accept-Encoding", "identity");
			conn.connect();

			inStream = conn.getInputStream();
			int count = conn.getContentLength();// 获取远程资源长度
			result = new byte[count];
			int readCount = 0;
			while (readCount < count) {// 循环读取数据
				readCount += inStream.read(result, readCount, count - readCount);
			}
			photo = toBase64(result);
		} catch (Exception e) {
			e.printStackTrace();
			log.error("获取远程图片失败", e);
		} finally {
			try {
				if (inStream != null) {
					inStream.close();
				}
				/*
				 * if (conn!= null) { conn.disconnect(); }
				 */
			} catch (IOException e) {
				log.error("文件处理错误!", e);
			}
			log.info("o==||=====>读取图片返回");
		}
		return photo;
	}

	private static String toBase64(byte[] imgData) {
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(imgData);
	}
}
