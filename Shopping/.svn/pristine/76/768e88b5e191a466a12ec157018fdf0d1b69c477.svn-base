package com.sybinal.shop.service.logistics;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sybinal.shop.common.AjaxResult;
import com.sybinal.shop.controller.admin.FLogisticsController;
import com.sybinal.shop.mapper.FLogisticsMapper;
import com.sybinal.shop.mapper.UserMapper;
import com.sybinal.shop.mapper.XlogisticsMapper;
import com.sybinal.shop.mapper.hjBaseMapper;
import com.sybinal.shop.mapper.logistictoidMapper;
import com.sybinal.shop.model.FLogistics;
import com.sybinal.shop.model.Xlogistics;
import com.sybinal.shop.model.hjBase;
import com.sybinal.shop.model.logistictoid;

@Service
public class LogisticsServiceImpl implements LogisticsService {
	@Autowired
	FLogisticsMapper LogisticsMapper;
	
	@Autowired
	XlogisticsMapper xLogisticsMapper;
	
	@Autowired
	hjBaseMapper hjBasemapper;
	
	@Autowired
	logistictoidMapper logisto;

	@Autowired
	UserMapper userService;
	@Override
	public List<FLogistics> checkTheOrder(String username) {
		// TODO Auto-generated method stub
		return LogisticsMapper.selectAll(username);
	}

	@Override
	public FLogistics selectOrderByIds(FLogistics fLogistics) {
		// TODO Auto-generated method stub
		return LogisticsMapper.selectByPrimaryKey(fLogistics);
	}

	@Override
	public FLogistics selectByPrimaryKey2(FLogistics fLogistics) {
		// TODO Auto-generated method stub
		return LogisticsMapper.selectByPrimaryKey2(fLogistics);
	}

	
	@Override
	public int updateBasicInformation(FLogistics fLogistics) {
		// TODO Auto-generated method stub
		return LogisticsMapper.updateByPrimaryKeySelective(fLogistics);
	}

	@Override
	public int addLogisticsQuantity(Xlogistics xlogistics) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.insertSelective(xlogistics);
	}

	@Override
	public List<Xlogistics> selLogisticsQuantity(Xlogistics xlogistics) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.selectByPrimaryKey(xlogistics.getxFIds());
	}

	@Override
	public List<Xlogistics> selectSA(Integer xlogistics,String s) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.selectSA(xlogistics,s);
	}

	@Override
	public int delLogisticsQuantity(Xlogistics xlogistics) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.deleteByPrimaryKey(xlogistics.getId());
	}

	@Override
	public Xlogistics selsLogisticsQuantity(Xlogistics xlogistics) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.selLogisticsQuantity(xlogistics.getId());
	}

	@Override
	public int editLogisticsQuantity(Xlogistics xlogistics) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.updateByPrimaryKeySelective(xlogistics);
	}

	@Override
	public List<FLogistics> selStatusOrder(FLogistics fLogistics,String uks) {
		// TODO Auto-generated method stub
		List<String> strings=new ArrayList<String>();
		if(fLogistics.getfIds()!=""){
		String[] split=fLogistics.getfIds().split(",");
        	strings = Arrays.asList(split);
		}
		System.out.println(strings);
		return LogisticsMapper.selStatusOrder(fLogistics,strings,uks);
	}

	@Override
	public int update(FLogistics fLogistics) {
		// TODO Auto-generated method stub
		return LogisticsMapper.updateByPrimaryKeySelective(fLogistics);
	}
	@Override
	public int default0(String hjShipperhawbcode) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.default0(hjShipperhawbcode);
	}

	@Override
	public int default1(Integer valueOf) {
		// TODO Auto-generated method stub
		return xLogisticsMapper.default1(valueOf);
	}

	@Override
	public TreeMap<String, Object> getfids(Map<String,String> map) {
		// TODO Auto-generated method stub
		String[] i=map.get("id").split(",");
		TreeMap<String, Object> param1 = new TreeMap<String, Object>();

		String username = userService.Justiactions(FLogisticsController.username()).getStandby1();
		System.out.println(username);
		for(int c=0;c<i.length;c++) {
			//list.add(LogisticsMapper.selectIDs(i[c]));
			hjBase s=hjBasemapper.selectresult(LogisticsMapper.selectIDs(i[c],username).getfIds(),username);
			if(s!=null&&!s.equals("")) {
				TreeMap<String, Object> params = new TreeMap<String, Object>();
				TreeMap<String, Object> params1 = new TreeMap<String, Object>();
				TreeMap<String, Object> params2 = new TreeMap<String, Object>();
				params.put("referenceNo", s.getHjReferenceno());
				params.put("shipperHawbcode", s.getHjShipperhawbcode());
				params.put("shippingMethod", s.getHjShippingmethod());
				params.put("shippingTypeCode", s.getHjStandy6());
				params.put("countryCode", s.getHjCountrycode());
				params.put("shipZip", s.getHjShipzip());
				params.put("orderWeight", (Double.parseDouble(s.getHjOrderweight())/1000));
				params.put("orderPieces", s.getHjOrderpieces());
				params.put("totalprice", s.getHjTotalprice());
				params.put("mailCargoType", s.getHjMailcargotype());
				params.put("length", s.getHjLength());
				params.put("width", s.getHjWidth());
				params.put("height", s.getHjHeight());
				params.put("isReturn", s.getHjIsreturn());
				params.put("isBattery", s.getHjIsbattery());
				params.put("consignee", params1);
				params1.put("consigneeCompany", s.getHjConsigneecompany());
				params1.put("consigneeProvince", s.getHjConsigneeprovince());
				params1.put("consigneeCity", s.getHjConsigneecity());
				params1.put("consigneeStreet", s.getHjConsigneestreet());
				params1.put("consigneeStreet2", s.getHjConsigneestreet2());
				params1.put("consigneeStreet3", s.getHjConsigneestreet3());
				params1.put("consigneePostcode", s.getHjConsigneepostcode());
				params1.put("consigneeName", s.getHjConsigneename());
				params1.put("consigneeTelephone", s.getHjConsigneetelephone());
				params1.put("consigneeMobile", s.getHjConsigneemobile());
				params1.put("consigneeEmail", s.getHjConsigneeemail());
				params1.put("consigneeCountryEname", s.getHjConsigneecountryename());
				params1.put("consigneeCountryCname", s.getHjConsigneecountrycname());
			
				Object[] intArr = new Object[1];
				intArr[0] = params2;
				params.put("itemArr",intArr);
				params2.put("invoiceEnname", s.getHjInvoiceenname());
				params2.put("invoiceCnname", s.getHjInvoicecnname());
				params2.put("invoiceWeight", (Double.parseDouble(s.getHjInvoiceweight())/1000));
				params2.put("invoiceQuantity", s.getHjInvoicequantity());
				params2.put("unitCode", s.getHjUnitcode());
				params2.put("invoiceUnitcharge", s.getHjInvoiceunitcharge());
				params2.put("invoiceCurrencycode", s.getHjInvoicecurrencycode());
				//params2.put("hsCode", s.getHjHscode());
				params2.put("sku", s.getHjSku());
				params2.put("isContainsBattery", s.getHjIscontainsbattery());
				params2.put("isAneroidMarkup", s.getHjIsaneroidmarkup());
				params2.put("isOnlyBattery", s.getHjIsonlybattery());
				params2.put("isBreakable", s.getHjIsbreakable());
				params2.put("isCharged", s.getHjIscharged());
				params2.put("salePrice", s.getHjSaleprice());
				params2.put("saleCurrency", s.getHjSalecurrency());
				params2.put("categoryName", s.getHjCategoryname());
				params2.put("parentEnName", s.getHjParentenname());
				param1.put("a"+c, params);

			}
		}
		return param1;
	}

	@Override
	public int postLogistics(String id,String username) {
		return LogisticsMapper.postLogistics(id,username);
	}

	@Override
	public int insertLableKey(String id, String lab,String num1,String id2,String method,String username) {//, String num2
		// TODO Auto-generated method stub
		LogisticsMapper.insertLableKey(id2,lab,num1,method,username);
		return hjBasemapper.insertLableKey(id,lab,num1,username);//,num2
	}

	@Override
	public FLogistics selHJLogistics2(String string) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int updatajp(String jpResult,String ordlis,String nos,String username) {
		// TODO Auto-generated method stub
		return LogisticsMapper.updatajp(jpResult,ordlis,nos,username);
	}

	
	@Override
	public int batdel(String lit) {
		// TODO Auto-generated method stub
		String[] split = lit.split(","); 
        List<String> strings = Arrays.asList(split);
		return LogisticsMapper.batdel(strings);
	}

	@Override
	public void addWeight(String hjInvoiceweight,String string,String nos,String username) {
		// TODO Auto-generated method stub
		LogisticsMapper.addWeight(hjInvoiceweight,string,nos,username);
	}

	@Override
	public int updataCn(String string, String string2) {
		// TODO Auto-generated method stub
		return LogisticsMapper.updataCn(string,string2);
	}
 
	@Override
	public AjaxResult LogisticToId(List<logistictoid> list) {
		// TODO Auto-generated method stub
		int c = logisto.BatchAll(list);
		if (c != 0) {
			return new AjaxResult(true, "订单批量添加成功!共添加了"+c+"条订单物流方式");
		}

		return new AjaxResult(false, "订单批量添加失败!");
	}

	@Override
	public int defaultsLO(Integer valueOf,String username) {
		// TODO Auto-generated method stub
		return LogisticsMapper.defaultsLO(valueOf,username);
	}
	/**
	 * 修改集拼
	 */
	@Override
	public int jps(String states,String ids) {
		// TODO Auto-generated method stub
		hjBasemapper.jps(states,ids);
		return LogisticsMapper.jps(states,ids);
	}
	
}
