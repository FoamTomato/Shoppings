<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<%@page session="true"%>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="cache-control" content="no-cache">
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="0">
    <meta name="_csrf" content="${_csrf.token}"/>
    <meta name="_csrf_header" content="${_csrf.headerName}"/>
    <title>订单列表</title>
	<jsp:include page="../commonCss.jsp"/> 
	<jsp:include page="../commonJs.jsp"/> 
	<script
	src="${pageContext.request.contextPath}/resources/admin/js/cvi_busy_lib1.js"></script>
	<style type="text/css">
      .text {
	    font-size: 14px;
	  }
	  .item {
	    margin-bottom: 18px;
	  }
	
	  .clearfix:before,
	  .clearfix:after {
	    display: table;
	    content: "";
	  }
	  .clearfix:after {
	    clear: both
	  }
	
	  .box-card {
	    margin:5px;
	    float:left
	  }
	  .el-row {
	    margin-bottom: 20px;
	    &:last-child {
	      margin-bottom: 0;
	    }
	  }
	  .el-col {
	    border-radius: 4px;
	  }
	</style>
</head>
<body class="blank" style="overflow:hidden">
<jsp:include page="../main/top.jsp"/> 
<jsp:include page="../main/left.jsp"/>
<jsp:include page="HJ_post_track.jsp"/>  
<!-- 加载条 -->

<script src="${pageContext.request.contextPath}/resources/admin/js/vue/vue.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/jss/logisticsChange.js"></script>
<script src="${pageContext.request.contextPath}/resources/admin/js/vue/vue-resource.js"></script>
<script src="${pageContext.request.contextPath}/resources/jss/sweetalert2@9.js"></script>
<!-- 引入样式 -->
<link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/element.css">
<!-- 引入组件库 -->
<script src="${pageContext.request.contextPath}/resources/jss/element.js"></script>
<script src="${pageContext.request.contextPath}/resources/jss/jquery-migrate-1.4.1.js"></script>

<script type="text/javascript" src="${pageContext.request.contextPath}/resources/tanathos-jquery.jqprint-13a4f0e/jquery.jqprint-0.3.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/core.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/aes.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/sha1.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/md5.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/evpkdf.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/hmac.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/cipher-core.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/enc-base64.js"></script>
<script type="text/javascript" src="${pageContext.request.contextPath}/resources/admin/js/crypto-js-develop/src/lib-typedarrays.js"></script>

<%-- <jsp:include page="prints.jsp"/>  --%>
<div id="apps">
<jsp:include page="prints.jsp" />
<jsp:include page="batch_add.jsp"/>
<jsp:include page="summary_modal.jsp"/> 
<div id="wrapper" class="leftleft" style="float: left;width:90%">
	<div class="small-header transition animated fadeIn">
		<div class="content animate-panel" style="margin-bottom:-50px">
		    <div class="hpanel">
		        <div class="panel-body">
					<div class="row">
						<div class="col-lg-12">
							<div class="hpanel">
								<div style="width:100%;float:left">
										<div class="form-group col-lg-2">
											<label>查询内容</label>
											<el-input v-model="orderNum" id="orderNum" size="mini" oninput="myFunction()" placeholder="订单/亚马逊编号,跟踪号/集拼号,id"></el-input>
										</div>
										<div class="form-group col-lg-2">
											<label>订单状态</label>
											<el-select v-model="StatusOrder" placeholder="请选择"  size="mini">
											    <el-option
											      v-for="item in ztoptions"
											      :key="item.value"
											      :label="item.name"
											      :value="item.value">
											    </el-option>
											  </el-select>
										</div>
										<div class="form-group col-lg-2">
											<label>物流方式</label>
											<el-select v-model="hj_shippingMethods" placeholder="请选择"  size="mini">
											    <el-option
											      v-for="item in logoutlist"
											      :key="item.id"
											      :label="item.logisticsName"
											      :value="item.shortName">
											    </el-option>
											  </el-select>
										</div>
										<div class="form-group col-lg-2">
										    <label>选择日期</label>
										    <el-date-picker  size="mini"
										      v-model="value6"
										      type="daterange"
										      align="right"
										      unlink-panels
										      range-separator="至"
										      start-placeholder="开始日期"
										      end-placeholder="结束日期"
										      :picker-options="pickerOptions2">
										    </el-date-picker>
										</div>
										
										</div>
										<div class="text-right m-t-xs" style="float:left;width:100%">
											   <div style="float:left">
												<nobr style="margin-top:10px">展示 <input min=0 type="number" v-model="pagsNums" style="width:50px"></nobr>
												<el-checkbox v-model="allChe" style="margin:-1px">运单</el-checkbox>
												<el-radio v-model="jps" label="2" style="margin:-1px">全部</el-radio>
  												<el-radio v-model="jps" label="1" style="margin:-1px">已集拼</el-radio>
  												<el-radio v-model="jps" label="0" style="margin:-1px">未集拼</el-radio>
												<el-checkbox v-model="pps" style="margin:-1px">未匹配</el-checkbox>
												</div>
											   <input type="checkbox" name="stockCheckboxFid" style="display:none">
											   <div style="float:right">
											   <el-button type="success" size="small" @click="selectall()" icon="el-icon-search" style="margin-left:10px">查询</el-button>
											   
											   <el-button type="warning" size="small"  @click="reset" icon="el-icon-refresh">重置</el-button>
											   
											   <el-button type="primary" size="small" @click="operator = true" icon="el-icon-edit-outline">操作</el-button>
											   
											   <c:if test="${fn:contains(jurisdiction.jurisdiction,'order_del')}">
											   	<el-button type="info" size="small" @click="delalls" icon="el-icon-close">删除</el-button>
											   </c:if>
											   </div>
												<!-- <a onclick="test()">====</a> -->
										</div>		
										<div style="width:100%;float:left">选中:{{checkedCities.length}} 总数:{{total}}</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				
			</div>
			
		</div>
		<div class="content animate-panel">	
			<div class="row">
				<div class="col-lg-12">
					<div class="hpanel">
						<div class="panel-body">
							<div style="margin-left:20px;width:100%">
								<div style="float:left;padding-top: 6px">
									<el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">全选</el-checkbox>
									<nobr style="color:red">红</nobr>/未发件，<nobr style="color:blue">蓝</nobr>/已发件，<nobr style="color:green">绿</nobr>/已录入erp，<nobr style="color:#c925d478">紫</nobr>/问题件 
								</div>
								<!-- 分页 -->
								<div style="text-align: center;margin-bottom:5px;width:80%">
										<el-pagination
										  background
										  :page-size="pagsNums"
		      							  @current-change="handleCurrentChange"
										  layout="prev, pager, next"
										  :total="total">
										</el-pagination>
								</div>
							</div>
							<div id="F-main-body" style="height:577px;overflow-y:auto">
							<el-checkbox-group  v-model="checkedCities" @change="handleCheckedCitiesChange">
								<el-card class="box-card" :body-style="{background:colors(item.standby6),color:'white'}" shadow="hover" v-for="item in lists.list" :key="item.id">
								  <div class="text item">
								  	<el-checkbox  :label="item.id"  style="color:#FFFFCC;margin-right:15px" :key="item.id">
								    	订单
									</el-checkbox>{{item.fIds}}
								    <el-button style="float: right; padding: 3px 0;color:white" type="text" @click="shows(item.fIds,item.id)">查看</el-button>
								  </div>
								  <div class="text item">
								    {{ellipsis(item.fStore,15)}}
								  </div>
								  <div class="text item">
								    物流：{{ellipsis(changeLogis(item.standby12),10)}}
								  </div>
								  <div class="text item">
								   集拼号：{{ellipsis(item.standby14,13)}}
								  </div>
								  <div class="text item">
								    跟踪号：{{ellipsis(item.standby11,13)}}
								  </div> 
								</el-card>
							</el-checkbox-group>
							</div>
						</div>
					</div>
				</div>
		</div>
	</div>
	</div>
<div id="rightright"
		style="float: right; width: 42%; position: fixed; right: 0px; display: none">
		<div class="row"
			style="top: 0; bottom: 0; position: fixed; overflow-y: hidden; overflow-x: hidden;">
			<div class="">
				<div class="hpanel">
					<div class="panel-body" style="height: 920px;overflow:hidden">
						<!-- 图片式展示 -->
						<div class="productImageList">
							<div style="margin: 20px 0;"></div>
							<div id="tt" class="easyui-tabs"
								data-options="tools:'#tab-tools'"
								style="width: 775px;height: 850px;border-bottom: 1px solid #3f5872 "></div>
							<div id="tab-tools">
								 <a href="javascript:void(0)"
									class="easyui-linkbutton"
									style="color: white; background: #e74c3c; border: 1px solid black;"
									@click="closeAndClear()">关闭</a> 

							</div>

						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
<!-- 操作功能区 -->
<el-dialog
  title="操作功能区"
  :visible.sync="operator"
  width="40%"
  :before-close="handleClose">
  
  <el-row :gutter="20">
	  <el-col :span="4">
	  	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_import')}">
			<el-upload
			  class="upload-demo"
			  :on-progress="toupload"
			  enctype="multipart/form-data"
			  action="${pageContext.request.contextPath}/admin/import?${_csrf.parameterName}=${_csrf.token}"
			  method="post"
			  :on-change="handleChange"
			  :show-file-list="false"
			  :file-list="fileList3"
			  :on-success="upsuccess">
			  <el-button size="small" type="primary" icon="el-icon-upload">点击上传</el-button>
			</el-upload>
		</c:if>
	 </el-col>
	 
	 <el-col :span="4">
	 	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_postasync')}">
			<el-button size="small" type="primary" @click="submitOrder" icon="el-icon-upload2">同步发送</el-button>
		</c:if>
	 </el-col>
	 
	 <el-col :span="4">
	 	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_post')}">
			<el-button size="small" type="primary" @click="syncOrder()" icon="el-icon-upload2">异步发送</el-button>
		</c:if>
	 </el-col>
	 
	 <el-col :span="4">
	 	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_post')}">
	 		<el-button size="small" type="primary" @click="traceNumber()" icon="el-icon-upload2">获取跟踪</el-button>
		</c:if>
	 </el-col>
	 
	 <el-col :span="4">
	 	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_print')}">
	 		<el-button size="small" type="primary" @click="print()" icon="el-icon-printer">批量打印</el-button>
		</c:if>
	 </el-col>
	
	 <el-col :span="4">
		<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_add')}">
			<el-button size="small" type="primary" @click="myModalBatchAdd()" icon="el-icon-plus">批量添加</el-button>
		</c:if>
	 </el-col>
	</el-row>
	
	<el-row :gutter="20">
	  <el-col :span="4">
		<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_email')}">
			<form id="formtyw3" method="post" action="${pageContext.request.contextPath}/admin/export3?${_csrf.parameterName}=${_csrf.token}" enctype="multipart/form-data">
			   <input id="idList3" name="idList3" type="text" style="display:none"/>
			   <el-button size="small" @click="excel_bu3" type="danger" icon="el-icon-download">导出邮政</el-button>
			</form>
		</c:if>
	  </el-col>
	  
	  <el-col :span="4">
		<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_outof')}">
			<form id="formtyw2" method="post" action="${pageContext.request.contextPath}/admin/export2?${_csrf.parameterName}=${_csrf.token}" enctype="multipart/form-data">
				<input id="idList2" name="idList2" type="text" value="" style="display:none"/>
			    <el-button size="small" @click="excel_bu2" type="danger" icon="el-icon-download">导出集拼</el-button>
			</form>
		</c:if>
	  </el-col>
	  
	  <el-col :span="4">
	  	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_out')}">
			<form id="formtyw" method="post" action="${pageContext.request.contextPath}/admin/export?${_csrf.parameterName}=${_csrf.token}" enctype="multipart/form-data">
			   <input id="idList" name="idList" type="text" value="" style="display:none"/>
			   <el-button size="small" @click="excel_buttonssss" type="danger" icon="el-icon-download">导出商品</el-button>
			</form>
		</c:if>
	  </el-col>
	  				
	  <el-col :span="4">
	  	<c:if test="${fn:contains(jurisdiction.jurisdiction,'order_out')}">
			<form id="formtyw4" method="post" action="${pageContext.request.contextPath}/admin/export/Estimate?${_csrf.parameterName}=${_csrf.token}" enctype="multipart/form-data">
			   <input id="idList4" name="idList4" type="text" value="" style="display:none"/>
			   <el-button size="small" @click="list4" type="danger" icon="el-icon-download">导出预估</el-button>
			</form>
		</c:if>	
	  </el-col>
	  	
	  <el-col :span="4">
	  	   <c:if test="${fn:contains(jurisdiction.jurisdiction,'order_outof_pdf')}">
		   	<el-button type="warning" size="small" @click="edit_summart()" icon="el-icon-menu">商品集拼</el-button>
		   </c:if>	
	  </el-col>

	  <el-col :span="4">
		   	<el-button type="primary" size="small" @click="ydlabel" icon="el-icon-upload2">义达标签</el-button>
	  </el-col>
	</el-row>
</el-dialog>
</div>
<script type="text/javascript">
$('#leftMenuOrder').addClass('active');
var oTable;
var header = $("meta[name='_csrf_header']").attr("content");  
var token = $("meta[name='_csrf']").attr("content"); 
var contextPath = '${pageContext.request.contextPath}';
$(function() {
	//$('.date').datepicker();
	$(document).ajaxSend(function(e, xhr, options) {
        xhr.setRequestHeader(header, token);
    });
	//userInfoListData()
});




/*
 * 查询输入框去值
 */
 function myFunction(){
	var x=$("#orderNum").val();
	let da=x.replace("01 ",",");
	let y="";
	for(var i=0;i<da.length;i++){
		y+=da[i];
	}
	$("#orderNum").val(y);
}

	
	
	Vue.http.options.root="${pageContext.request.contextPath}";
	var vm=new Vue({
			el:'#apps',
			data:{
				fileList3: [],
				jurisdiction:{},//权限
				logoutlist:[],//物流列表
				orderNum:"",//查询内容
				StatusOrder:"",//订单状态
				hj_shippingMethods:"",//物流方式
				startDatas:"",//开始日期
				endDatas:"",//结束日期
				pagsNums:200,//展示
				allChe:false,//运单
				pps:false,//未匹配
				jps:"2",//是否集拼
				lists:[],//商品列表
				page:"1",//第几页
				totalPage:[],//所有页数显示数据
		        total:0,//总长
		        checkAll: false,//全选
		        checkedCities: [],//选中
		        isIndeterminate: true,
		        sadmin:"出货集拼员P001",//操作员
		        S_pack:"",//渠道袋序
		        S_num:"",//袋内件数(个
		        S_weights:"",//净重(kg
		        S_weight2:"",//毛重(kg)
		        S_time:"",//操作时间
		        S_logistic:[],//物流渠道
		        sun:0,
		        suns:0,
		        resultHJ:"",//文本内容
		        bat_invoiceEnname:"",//英文
		        bat_invoiceCnname:"",//中文
		        bat_COMPANY:"1",//公司
		        bat_unitCode:"PCE",//单位
		        bat_invoiceUnitcharge:"",//总价
		        bat_invoiceCurrencycode:"USD",//币种
		        bat_invoiceQuantity:"1",//数量
		        bat_hsCode:"1",//协编
		        bat_saleCurrency:"USD",//销售结算币种
		        bat_categoryName:"家具装饰",//产品中文类目
		        bat_orderWeight:"",//重量/g
		        bat_orderPieces:"1",//外包装数
		        bat_mailCargoType:"2",//申报种类
		        bat_parentEnName:"Furniture decoration",//产品英文类目
		        bat_length:"",//长
		        bat_width:"",//宽
		        bat_height:"",//高
		        bat_shippingMethod:"",//发货
		        bat_isContainsBattery:false,//是否包含电池
		        bat_isAneroidMarkup:false,//非液体化妆品
		        bat_isOnlyBattery:false,//是否纯电池
		        bat_isBreakable:false,//是否易碎
		        bat_isCharged:false,//是否带电
		        bat_isReturn:false,//是否退回
		        bat_CITY:"",//城市
		        bat_province:"",//地址
		        bat_Login:"",
		        wids:"",//列表宽度
		        bat_invoicePrivan:"",//州省
		        bat_invoiceCity:"",//城市
		        operator:false,//操作
		        value6:"",//日期
		        ztoptions: [{
		            value: '0',
		            name: '已发件'
		          }, {
		            value: '1',
		            name: '未发件'
		          }, {
		            value: '2',
		            name: '已录入erp'
		          }, {
		            value: '3',
		            name: '问题件'
		          }],
		          pickerOptions2: {
		              shortcuts: [{
		                text: '最近一周',
		                onClick(picker) {
		                  const end = new Date();
		                  const start = new Date();
		                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);
		                  picker.$emit('pick', [start, end]);
		                }
		              }, {
		                text: '最近一个月',
		                onClick(picker) {
		                  const end = new Date();
		                  const start = new Date();
		                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);
		                  picker.$emit('pick', [start, end]);
		                }
		              }, {
		                text: '最近三个月',
		                onClick(picker) {
		                  const end = new Date();
		                  const start = new Date();
		                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
		                  picker.$emit('pick', [start, end]);
		                }
		              }]
		            },
			},
			created(){
				this.selectall()
			    
				//查询权限和物流
				this.$http.post("order/select/list?${_csrf.parameterName}=${_csrf.token}").then(result=>{
				    this.logoutlist=result.body.logoutlist
				    this.jurisdiction=result.body.jurisdiction
				    this.wids="16%"
				})
			},
			methods:{
				  selectall(){
					    let datas={}
						datas["orderNum"]=this.orderNum
						datas["StatusOrder"]=this.StatusOrder
						datas["startDatas"]=this.value6[0]
						datas["endDatas"]=this.value6[1]
						datas["pagsNums"]=this.pagsNums
						if(this.pps==false){
							datas["hj_shippingMethods"]=this.hj_shippingMethods
						}else if(this.pps==true){
							datas["hj_shippingMethods"]='10';
						}
						datas["jps"]=this.jps
						datas["page"]=this.page
						datas["limit"]=this.pagsNums
						if(this.allChe==true){
							datas["allChe"]="1"
						}
						//查询物流
						this.$http.post("Logistics/checkTheOrder?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(datas),{emulateJSON:true}).then(result=>{
							this.lists=result.body
							this.total=result.body.total
							this.checkedCities=[]
						})
				  },
			      handleChange(file, fileList) {
			    	  //上传文件名
		          },
		          toupload(event, file, fileList){
		        	  //上传中
		        	  toastr.success(file.name+"已上传")
		          },
		          upsuccess(response, file, fileList){
		        	  this.operator=false
		        	  //上传成功返回
		        	  this.$notify({
		                  title: '成功',
		                  message: '成功上传了'+response+"条数据",
		                  type: 'success'
		                })
		              this.selectall()
		          },
		          ellipsis(value,leng){
		        	  //长度限制
		                if (!value) return '';
		                if (value.length > leng) {
		                    return value.slice(0,leng) + '...'
		                }
		                return value
		          },
		          changeLogis(val){
		        	  //转换物流
		        	  let chans=this.logoutlist
		        	  for(let i=0;i<chans.length;i++){
		        		  if(chans[i].shortName==val||chans[i].standy5==val){
		        			  return chans[i].logisticsName
		        		  }
		        	  }
		        	  //return CountryEANDCs(val)
		          },
			      handleCurrentChange(val) {
					  //分页改变
					 this.page=val
					 this.selectall()
			      },
			      closeAndClear(){
			    		// 获取选中的标签页面板（tab panel）和它的标签页（tab）对象
			    		var pp = $('#tt').tabs('getSelected');
			    		//获取选项卡的总长度
			    		var tabss=$('#tt').tabs('tabs');
			    		var t=tabss.length;
			    		if (pp){
			    		//关闭所有的框
			    		var y=0;
			    		for(var cd=0;cd<t;cd++){
			    			if(cd<t){
			    				$('#tt').tabs('close', 0);
			    				y++;
			    			}else if(cd>t){
			    				$('#tt').tabs('close', 1);
			    				y++;
			    			}
			    		}

			    	 	//列表变三个
			    	 	this.wids="16%"
			    	 	$(".box-card").css("width",this.wids)
			    		$("#rightright").css("display","none")
			    		$(".leftleft").css("width","90%")
			    		}
			      },
			      shows(ids,id){
			    		//右边详情页展示显示
			    	 	$("#rightright").css("display","block")
			    	 	//左边变窄
			    	 	$(".leftleft").css("width","48%")
			    	 	
			    	 	this.wids="32%"
		    	 		$(".box-card").css("width",this.wids)
			    	 	//添加详情页选项卡
			    	 	// 获取选中的标签页面板（tab panel）和它的标签页（tab）对象
			    		var pp = $('#tt').tabs('getSelected');
			    		//var tab = pp.panel('options').tab; // 相应的标签页（tab）对象 
			    		
			    		//记录是否重复
			    		var cf=0;
			    		
			    		//获取选项卡的总长度
			    		var tabss=$('#tt').tabs('tabs');
			    		var t=tabss.length;
			    		
			    		//获取到每个标签的标题
			    		var idqs = document.getElementsByClassName("tabs-title");
			    		if(idqs.length != 0){
			    			for(var c=0;c<idqs.length;c++){
			    			//控制台进行对比	
			    				if(idqs[c].innerText==ids){
			    					z=idqs[c].innerText;
			    					cf++;
			    				}
			    				
			    		}}
			    		
			    		 if (cf==0) {
			    			 $('#tt').tabs('add',{
			    					title: ids,
			    					content:'<iframe scrolling="yes" id="mainiframe" name="mainiframe" width="105.5%" height="100%" frameborder="0px" style="margin:-20px;padding-top:20px;overflow:hidden" src="/Shopping/Logistics/selectOrderById?id='+ids+'&fIds='+id+'"></iframe>',
			    					closable: true
			    				});
			    				
			    			} else {
			    	        	$('#tt').tabs('select', z);//选中并刷新
			    	        } 
			      },
			      handleCheckAllChange(val) {
			    	//全选
			    	var lists=[]
			   		for(let i=0;i<this.lists.list.length;i++){
			   		   lists.push(this.lists.list[i].id)
			   	    }
		          	this.checkedCities = val ? lists : [];
		          	this.isIndeterminate = false;
		          },
		          handleCheckedCitiesChange(value) {
		        	  //单选
		          	let checkedCount = value.length;
		         	this.checkAll = checkedCount === this.lists.list.length;
		          	this.isIndeterminate = checkedCount > 0 && checkedCount < this.lists.list.length;
		          },
		          delalls(){
		        	    //批量删除
		        		//创建传输值
						if(this.checkedCities.length=="0"){
							 toastr.error("请选择需要删除的产品");
							 return false;
						 }
						Swal.fire({
							  title: '你确定吗?',
							  text: "删除这"+this.checkedCities.length+"条后无法恢复!",
							  icon: 'warning',
							  showCancelButton: true,            
							    confirmButtonColor: '#3085d6',// 确定按钮的 颜色
							    confirmButtonText: '确定',// 确定按钮的 文字
							    showCancelButton: true, // 是否显示取消按钮
							    cancelButtonColor: '#d33', // 取消按钮的 颜色
							    cancelButtonText: "取消", // 取消按钮的 文字
							}).then((result) => {
							  if (result.value) {
								//axios请求方式
							 	this.$http.post("Logsistics/BatchDel?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(this.checkedCities),{emulateJSON:true}).then(result=>{
								    this.$notify({
					                  title: '成功',
					                  message: '成功删除了'+result.body+"条数据",
					                  type: 'success'
					                });
									this.selectall()
								}) 
							  }else{
								  Swal.fire("取消", "点击了取消", "error");
							  }
							})
		          },
		          reset(){
		        	  //重置按钮
				      this.orderNum=""
			    	  this.StatusOrder=""
		    		  this.hj_shippingMethods=""
	    			  this.startDatas=""
    				  this.endDatas=""
    				  this.allChe=false
    				  this.pagsNums=50//展示
    				  this.allChe=false//运单
    				  this.pps=false//未匹配
    				  this.jps="2"//是否集拼
		          },
		          async submitOrder(){
		        	  this.operator=false
		        	 //同步发送
		        	 if(this.checkedCities.length=="0"){
		        		 toastr.error("请选择需要同步发送的产品");
						 return false;
		        	 }
		        	//发送订单
					await this.$http.post("Logistics/getPostId?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(this.checkedCities),{emulateJSON:true}).then(result=>{
						let data=result.body
						this.sun=0
      					this.suns=0
      					this.resultHJ=""
      					for(let key in result.body){
      						this.sun+=1;
      						this.$http.post("Logistics/getPostYu?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(result.body[key]),{emulateJSON:true}).then(result1=>{
      							let data2=result1.body
      							if(data2.toString().match("重量超过")||data2.toString().match("敏感词")){
      								toastr.error(data[key].shipperHawbcode+data2);
      								return false;
      							}
      							if(data2.status==1){
 									 if(data2.result.status=="0"){
 										 this.resultHJ+="发送失败   "+data[key].shipperHawbcode+"  消息：:"+data2.result.errorMessage+"\n"+"*****************"+"\n"
 										 toastr.error(data2.result.errorMessage);
 										 $("#postHj").val(this.resultHJ);
 										 PostTrack();
 										 return false
 									 }else if(data2.result.status=="1"){
 										let labls={};
 										labls["methosd"]=data[key].shippingMethod;
 										labls["id2"]=data[key].shipperHawbcode;
 										labls["id"]=data2.result.referenceNo;
 										labls["lab"]=data2.result.lableKey;
 										labls["num1"]=data2.result.trackNum1;
 										labls["num2"]=data2.result.trackNum2;
 										this.$http.post("Logistics/setLableid?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(labls),{emulateJSON:true}).then(result2=>{
 											this.resultHJ+="发送成功   "+data[key].shipperHawbcode+"\n"+"*****************"+"\n"
 											this.suns+=1;
 											$("#conHJ").html("已发送"+this.sun+"条，其中"+this.suns+"条发送成功，"+(this.sun-this.suns)+"条发送失败");
 											$("#postHj").val(this.resultHJ);
 											PostTrack();
 										})
 									}
 								 }else if(data2.status==0){
 									 this.resultHJ+="发送失败   "+data[key].shipperHawbcode+"  消息：:"+data2.errormsg+"\n"+"*****************"+"\n"
									 $("#postHj").val(this.resultHJ);
									 PostTrack();
 								 }
      						})
						}
		          })
		          },
		          async syncOrder(){
		        	  this.operator=false
		        	  //异步发送
		        	  if(this.checkedCities.length=="0"){
		        		 toastr.error("请选择需要异步发送的产品");
						 return false;
		        	  }
		        	  //异步发送产品
		        	  await this.$http.post("Logistics/getPostId?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(this.checkedCities),{emulateJSON:true}).then(result=>{
		        		    let data=result.body
		        		    this.sun=0
	      					this.suns=0
	      					this.resultHJ=""
	      					for(let key in result.body){
	      						this.sun+=1
	      						this.$http.post("Logistics/asyncPostYu?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(result.body[key]),{emulateJSON:true}).then(result1=>{
	      							let data2=result1.body
	      							if(data2.toString().match("重量超过")||data2.toString().match("敏感词")){
	      								toastr.error(data[key].shipperHawbcode+data2);
	      								return false;
	      							}
	      							if(data2.status==1){
	 									 if(data2.result.status=="0"){
	 										 this.resultHJ+="发送失败   "+data[key].shipperHawbcode+"  消息：:"+data2.result.errorMessage+"\n"+"*****************"+"\n"
	 										 toastr.error(data2.result.errorMessage);
	 										 $("#postHj").val(this.resultHJ);
	 										 PostTrack();
	 										 return false
	 									 }else if(data2.result.status=="1"){
 											this.resultHJ+="发送成功   "+data[key].shipperHawbcode+"\n"+"*****************"+"\n"
 											this.suns+=1;
 											$("#conHJ").html("已发送"+this.sun+"条，其中"+this.suns+"条发送成功，"+(this.sun-this.suns)+"条发送失败");
 											$("#postHj").val(this.resultHJ);
 											PostTrack();
	 									}
	 								 }else if(data2.status==0){
	 									 this.resultHJ+="发送失败   "+data[key].shipperHawbcode+"  消息：:"+data2.errormsg+"\n"+"*****************"+"\n"
 										 $("#postHj").val(this.resultHJ);
 										 PostTrack();
 									 }
	      						})
							}
		        	  })
		          },
		          async traceNumber(){
		        	  this.operator=false
		        	//获取跟踪号
		        	  if(this.checkedCities.length=="0"){
		        		 toastr.error("请选择需要获取跟踪号的产品");
						 return false;
		        	  }
		        	await this.$http.post("Logistics/getPostId?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(this.checkedCities),{emulateJSON:true}).then(result=>{
		        		let data=result.body
		        		let refe=[]
	        		    this.sun=0
      					this.suns=0
      					this.resultHJ=""
						for(let key in result.body){
							refe.push(data[key].referenceNo)
						}
						let resultD={}
						resultD["referenceNoList"]=refe
						this.$http.post("Logistics/traceNumber?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(resultD),{emulateJSON:true}).then(result1=>{
							//获取到所有的编号集合
							let c1=result1.body.result
							//迭代传后台
							let data3={}
							for(let c2=0;c2<c1.length;c2++){
								this.sun+=1;
								data3["referenceNo"]=c1[c2].referenceNo
								data3["trackNum1"]=c1[c2].trackNum1
								this.$http.post("Logistics/setTrack?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(data3),{emulateJSON:true}).then(result1=>{
									this.suns+=1;
									this.resultHJ+="发送成功   "+c1[c2].referenceNo+"\n"+"*****************"+"\n"
									$("#conHJ").html("已发送"+this.sun+"条，其中"+this.suns+"条发送成功，"+(this.sun-this.suns)+"条发送失败");
									$("#postHj").val(this.resultHJ);
									PostTrack();
								})
							}
						})
		          	})
					},
					async print(){
						this.operator=false
						//打印
						if(this.checkedCities.length=="0"){
			        		 toastr.error("请选择需要打印的产品");
							 return false;
			        	}
						await this.$http.post("Logistics/getpdfall?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(this.checkedCities),{emulateJSON:true,_timeout:10000}).then(result=>{
							window.open("${pageContext.request.contextPath}/"+result.body,"_blank");
						})
					},
					edit_summart(){
						//集拼
						if(this.checkedCities.length=="0"){
			        		 toastr.error("请选择需要集拼的产品");
							 return false;
			        	}
						let idlists=this.checkedCities;
						$("#myModal_summary").modal("show");
						$("body").css('padding-right','0px');
						$(".Foam-title").html("集拼单号打印信息");
				        this.sadmin="出货集拼员P001",//操作员
				        this.S_pack=""//渠道袋序
				        this.S_num=this.checkedCities.length//袋内件数(个
				        this.S_weights=""//净重(kg
				        this.S_weight2=""//毛重(kg)
				        this.S_logistic=""
				        this.getTime()//操作时间
					},
					getTime(){
						//获取当前时间
					      var _this = this;
					      let yy = new Date().getFullYear();
					      let mm = new Date().getMonth()+1;
					      let dd = new Date().getDate();
					      let hh = new Date().getHours();
					      let mf = new Date().getMinutes()<10 ? '0'+new Date().getMinutes() : new Date().getMinutes();
					      let ss = new Date().getSeconds()<10 ? '0'+new Date().getSeconds() : new Date().getSeconds();
					      _this.S_time = yy+'-'+mm+'-'+dd+' '+hh+':'+mf+':'+ss;
					 },
					 modalCsum(){
						 	//集拼提交
							//传送所有单号
							if(this.sadmin==""||this.S_weights==""||this.S_weight2==""||this.S_logistic==""||this.S_time==""||this.S_pack==""){
								toastr.error("有值为空")
								return false
							}
							let datas={}
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							datas["referenceNoList"]=reno.substr(0,reno.length-1)
							datas["S_channel"]=this.S_logistic
							datas["S_weights"]=this.S_weights
							datas["S_weight2"]=this.S_weight2
							datas["S_admin"]=this.sadmin
							datas["S_time"]=this.S_time
							datas["S_pack"]=this.S_pack
							datas["S_num"]=this.checkedCities.length
							this.$http.post("Logistics/dropinfo?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(datas),{emulateJSON:true}).then(result=>{
								var y=result.body
								console.log(result)
								console.log(y.length)
								if(y.length>1){
									toastr.error(result.body)
									return false
								}
								$("#barcodes").barcode(result.body.dropNo, "code128",{barWidth:2,barHeight:88,showHRI:true,fontSize:24}); 
								$("#myModal_Print").modal("show"); 
								$("#myModal_summary").modal("hide");
							})
					 },
					 print2(){
						 //打印
						 $("#pring_t").jqprint()
					 },
					 myModalBatchAdd(){
						 this.operator=false
						 	//批量添加
						 	if(this.checkedCities.length=="0"){
				        		 toastr.error("请选择需要添加运单的产品")
								 return false
				        	}
						 	//显示弹窗
							$("#myModal_batch_add").modal("show")
							//清空内容
							this.addReset()
					 },
					 Iprice(){
						//随机价格
						//x上限，y下限     
					    var x = 11
					    var y = 3
					    var rand = parseInt(Math.random() * (x - y + 1) + y)
						return rand
					 },
					 addReset(){
						 //批量添加刷新
						 	let prices=this.Iprice()
							this.bat_invoiceEnname=""
							this.bat_invoiceCnname=""
							this.bat_unitCode="PCE"
							this.bat_invoiceUnitcharge=prices
							this.bat_invoiceCurrencycode="USD"
							this.bat_hsCode="1"
							this.bat_isContainsBattery=false
							this.bat_salePrice=prices
							this.bat_isAneroidMarkup=false
							this.bat_saleCurrency="USD"
							this.bat_isOnlyBattery=false
							this.bat_categoryName="家具装饰"
							this.bat_isBreakable=false
							this.bat_parentEnName="Furniture decoration"
							this.bat_isCharged=false
							this.bat_invoiceQuantity="1"
							this.bat_remark=""
							this.bat_orderPieces="1"
							this.bat_mailCargoType="2"
							this.bat_consigneeCountryEname=""
							this.bat_consigneeCountryCname=""
							this.bat_orderWeight=""
							this.bat_length=""
							this.bat_width=""
							this.bat_height=""
							this.bat_CITY=""
							this.bat_province=""
							this.bat_COMPANY="1"
							this.bat_isReturn=false
							this.bat_shippingMethod=""
							this.bat_invoicePrivan=""
							this.bat_invoiceCity=""
					 },
					 add_batch(){
						    //添加
						 	let datas={};
							if(this.bat_orderWeight.substr(0,1)=="0"){
								toastr.error("重量不能以0开头")
								return false
							}
							for(let i=0;i<this.bat_shippingMethod.length;i++){
								if(this.bat_shippingMethod==this.logoutlist.shortName||this.bat_shippingMethod==this.logoutlist.standy5){
									if(this.bat_orderWeight>(this.logoutlist.standy4*1000)){
										toastr.error("重量大于"+this.logoutlist.standy4+"千克");
										return false;
									}
								}
							}
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							datas["List"]=reno
							datas["bat_invoiceEnname"]=this.bat_invoiceEnname
							datas["bat_invoiceCnname"]=this.bat_invoiceCnname
							datas["bat_invoiceCity"]=this.bat_invoiceCity
							//datas["bat_province"]=this.bat_province
							datas["bat_COMPANY"]=this.bat_COMPANY
							datas["bat_unitCode"]=this.bat_unitCode;
							datas["bat_invoiceUnitcharge"]=this.bat_invoiceUnitcharge;
							datas["bat_invoiceCurrencycode"]=this.bat_invoiceCurrencycode;
							datas["bat_invoiceQuantity"]=this.bat_invoiceQuantity;
							datas["bat_hsCode"]=this.bat_hsCode;
							datas["bat_salePrice"]=this.bat_salePrice;
							datas["bat_saleCurrency"]=this.bat_saleCurrency;
							datas["bat_categoryName"]=this.bat_categoryName;
							//datas["bat_Login"]=this.bat_Login;
							datas["bat_orderWeight"]=this.bat_orderWeight;
							datas["bat_orderPieces"]=this.bat_orderPieces;
							datas["bat_mailCargoType"]=this.bat_mailCargoType;
							datas["bat_parentEnName"]=this.bat_parentEnName;
							datas["bat_length"]=this.bat_length;
							datas["bat_width"]=this.bat_width;
							datas["bat_height"]=this.bat_height;
							datas["bat_invoicePrivan"]=this.bat_invoicePrivan;
							datas["bat_shippingMethod"]=this.bat_shippingMethod;
							if(this.bat_isContainsBattery==true){
								datas["bat_isContainsBattery"]="1";//是否包含电池
							}else{
								datas["bat_isContainsBattery"]="0";
							}
							if(this.bat_isAneroidMarkup==true){
								datas["bat_isAneroidMarkup"]="1";//是否属于非液体化妆品
							}else{
								datas["bat_isAneroidMarkup"]="0";
							}
							if(this.bat_isOnlyBattery==true){
								datas["bat_isOnlyBattery"]="1";//是否为纯电池
							}else{
								datas["bat_isOnlyBattery"]="0";
							}
							if(this.bat_isBreakable==true){
								datas["bat_isBreakable"]="1";//是否易碎
							}else{
								datas["bat_isBreakable"]="0";
							}
							if(this.bat_isCharged==true){
								datas["bat_isCharged"]="1";//是否带电
							}else{
								datas["bat_isCharged"]="0";
							}
							if(this.bat_isReturn==true){
								datas["bat_isReturn"]="1";//是否带电
							}else{
								datas["bat_isReturn"]="0";
							}
							if(this.bat_invoiceEnname=="" ||
							   this.bat_invoiceCnname=="" ||
							   //this.bat_CITY=="" ||
							   //this.bat_province=="" ||
							   this.bat_COMPANY=="" ||
							   this.bat_unitCode=="" ||
							   this.bat_invoiceCurrencycode=="" ||
							   this.bat_invoiceUnitcharge=="" ||
							   this.bat_invoiceQuantity=="" ||
							   this.bat_hsCode=="" ||
							   this.bat_salePrice=="" ||
							   this.bat_saleCurrency=="" ||
							   this.bat_categoryName=="" ||
							   //this.bat_Login=="" ||
							   this.bat_orderWeight=="" ||
							   this.bat_orderPieces=="" ||
							   this.bat_mailCargoType=="" ||
							   this.bat_parentEnName=="" ||
							   this.bat_width=="" ||
							   this.bat_length=="" ||
							   this.bat_height=="" ||
							   this.bat_shippingMethod==""){
								toastr.error("有值为空");
								return false;
							}
							console.log(datas)
							//批量添加运单
							this.$http.post("Logistics/ALLbatch?${_csrf.parameterName}=${_csrf.token}",JSON.stringify(datas),{emulateJSON:true}).then(result=>{
								$("#myModal_batch_add").modal("hide")
								toastr.success("添加成功")
								//界面刷新
								this.selectall()
							})
					 },
					 excel_bu3(){
						 this.operator=false
						 //导出邮政
						 if(this.checkedCities.length>0){
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							$("#idList3").val(reno);
							$("#formtyw3").submit();
						}else{
							toastr.error("请选择邮政需要导出的文件");
						}
					},
					excel_bu2(){
						this.operator=false
						//导出集拼
						if(this.checkedCities.length>0){
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							$("#idList2").val(reno);
							$("#formtyw2").submit();
						}else{
							toastr.error("请选择需要导出的集拼产品");
						}
					},
					excel_buttonssss(){
						this.operator=false
						//导出产品
						if(this.checkedCities.length>0){
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							$("#idList").val(reno);
							$("#formtyw").submit();
						}else{
							toastr.error("请选择需要导出的产品");
						}
					},
					list4(){
						this.operator=false
						//导出预估
						if(this.checkedCities.length>0){
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							$("#idList4").val(reno);
							$("#formtyw4").submit();
						}else{
							toastr.error("请选择需要预估的产品");
						}
					},
					colors(val){
						//颜色判断
						switch(val){
						case"0":
							return "#0099CC"
						case"1":
							return "#FF6666"
						case"2":
							return "#99CC66"
						case"3":
							return "#c925d478"
						}
					},
					handleClose(done) {
						//关闭操作功能区						
				        this.$confirm('确认关闭？')
				          .then(_ => {
				            done();
				          })
				          .catch(_ => {});
				    },
				    ydlabel(){
				    	//获取义达标签
				    	this.operator=false
						//导出产品
						if(this.checkedCities.length>0){
							let reno=""
							for(let gi=0;gi<this.checkedCities.length;gi++){
								reno+=this.checkedCities[gi]+","
							}
							$("#idList").val(reno);
							$("#formtyw").submit();
						}else{
							this.$message('请选择需要获取的产品');
						}
				    }
				},
				updated(){
		    	 $(".box-card").css("width",this.wids)
				}
				
	})
</script>

</body>
</html>