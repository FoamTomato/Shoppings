package com.sybinal.shop.controller.admin;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.sybinal.shop.common.AjaxResult;
import com.sybinal.shop.common.PageInformation;
import com.sybinal.shop.model.DTfzyingWithBLOBs;
import com.sybinal.shop.model.DTfzyings;
import com.sybinal.shop.model.DTfzyingsWithBLOBs;
import com.sybinal.shop.model.DTpic;
import com.sybinal.shop.model.DTstock;
import com.sybinal.shop.model.DTstocks;
import com.sybinal.shop.model.Fproduct;
import com.sybinal.shop.model.OnlineDownloadWithBLOBs;
import com.sybinal.shop.model.Option;
import com.sybinal.shop.model.Product;
import com.sybinal.shop.model.ProductCategory;
import com.sybinal.shop.model.ProductOptionInfo;
import com.sybinal.shop.model.ProductRelation;
import com.sybinal.shop.model.Sku;
import com.sybinal.shop.model.SkuVOInfo;
import com.sybinal.shop.service.catalog.DTfzyingService;
import com.sybinal.shop.service.catalog.DTfzyingsService;
import com.sybinal.shop.service.catalog.DTpicService;
import com.sybinal.shop.service.catalog.DTstockService;
import com.sybinal.shop.service.catalog.FProductService;
import com.sybinal.shop.service.catalog.ProductCategoryService;
import com.sybinal.shop.service.catalog.ProductService;
import com.sybinal.shop.service.catalog.SkuService;
import com.sybinal.shop.service.catalog.dTstocksService;
import com.sybinal.shop.service.onlineDown.OnlineDownService;
import com.sybinal.shop.service.option.OptionService;
import com.sybinal.shop.service.user.UserService;
import com.sybinal.shop.utils.UserUtils;

@Controller
public class ProductController {

	@Autowired
	UserService userService;

	@Autowired
	ProductCategoryService productCategoryService;

	@Autowired
	ProductService productService;

	@Autowired
	OptionService optionService;

	@Autowired
	SkuService skuService;

	@Autowired
	FProductService fProductService;

	@Autowired
	DTfzyingService dTfzyingService;

	@Autowired
	DTfzyingsService dTfzyingsService;

	@Autowired
	DTstockService dTstockService;

	@Autowired
	dTstocksService DTstocksService;

	@Autowired
	DTpicService dTpicService;

	@Autowired
	OnlineDownService onlineservice;

	@RequestMapping(value = "/admin/productList", method = RequestMethod.GET)
	@ResponseBody
	public ModelAndView productList(@ModelAttribute Product product, PageInformation pageInfo) {
		ModelAndView model = new ModelAndView();
		/*
		 * Map<Integer, String> categoryMap = new TreeMap<Integer, String>(); //
		 * 取得商品分类信息 List<ProductCategory> productCategoryList =
		 * productCategoryService.getProductCategory(); pageInfo.setRowCount(10);
		 * pageInfo.setStartRow(2); pageInfo.setTotalCount(100); // 展示长度
		 * pageInfo.setiDisplayLength("100"); pageInfo.setsEcho("2"); // 展示的页码
		 * pageInfo.setiDisplayStart("1"); // 取得商品信息 product.setHot(2);
		 * product.setCategoryId(0); product.setProductStatus(2); Map<String, Object>
		 * productList = productService.getProductInfoByCondition(pageInfo, product); //
		 * System.out.println(productList); if (productCategoryList != null &&
		 * productCategoryList.size() > 0) { categoryMap.put(0, "全部"); for
		 * (ProductCategory productCategory : productCategoryList) {
		 * categoryMap.put(productCategory.getId(), productCategory.getName()); } }
		 */

		// 取得商品信息（新）
		List<DTfzyingsWithBLOBs> dTfzyingList = dTfzyingsService.selectAll();
		/*
		 * for(DTfzyingsWithBLOBs title:dTfzyingList){
		 * System.out.println(title.getFen()); }
		 */
		// List<Fproduct> fproduct = fProductService.selectProAll();
		// System.out.println("==" + dTfzyingList);

		model.addObject("dTfzyingList", dTfzyingList);
		// model.addObject("fproducty", fproduct);
		// model.addObject("productList", productList);
		// model.addObject("categoryMap", categoryMap);
		model.setViewName("admin/product/productInfoMain");
		return model;
	}

	// 弹窗遮罩层
	@RequestMapping(value = "admin/windows")
	public ModelAndView productWindow() {
		ModelAndView model = new ModelAndView();
		model.setViewName("admin/product/windows");
		return model;
	}

	// 遮罩层查询图片
	@RequestMapping(value = "/admin/mainViewImgs", method = RequestMethod.POST, headers = "Accept=application/json")
	@ResponseBody
	public ArrayList<String> mainViewImg(@RequestBody OnlineDownloadWithBLOBs online) {
		System.out.println("进入" + online);
		//String[] onlines = online.getfImagesUrl().split(",/Shopping/resources/uploads/");
		ArrayList<String> arrayList = new ArrayList<String>();
		ArrayList<String> arrayList2 = new ArrayList<String>();
		// 根据sku查询唯一的在线地址
		List<OnlineDownloadWithBLOBs> list = onlineservice.ImagesUnique(online.getfSku());

		// System.out.println("第" + i + "个" + onlines[i]);
		for (OnlineDownloadWithBLOBs c : list) {
			// 根据唯一的在线地址查询一个本地地址
			List<OnlineDownloadWithBLOBs> lists = onlineservice.ImageLocal(c.getfOnlineUrl());
			
			for (OnlineDownloadWithBLOBs cd : lists) {
				arrayList2.add(cd.getfImagesUrl());  
				/*for (int i = 0; i < onlines.length; i++) {
					System.out.println("F:/LibraryImage/" + onlines[i].replaceAll(" ", "") + "++++" + cd.getfImagesUrl());
					if (("F:/LibraryImage/" + onlines[i].replaceAll(" ", "")).equals(cd.getfImagesUrl())) {
						System.out.println("存在" + onlines[i]);
						arrayList.add("F:/LibraryImage/" + onlines[i].replaceAll(" ", ""));
					} 
				}*/ 
				//arrayList2.add(cd.getfImagesUrl());
			}
		}
		return arrayList2;

	}

	// 跳转右侧小页面
	@RequestMapping(value = "admin/productFright")
	public ModelAndView productfright(@ModelAttribute Product product, HttpServletRequest req, Fproduct fproduct,
			PageInformation pageInfo, @RequestParam("id") Integer id) {
		ModelAndView model = new ModelAndView();
		// 获取session
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		// 根据id查询产品的详情
		DTfzyingsWithBLOBs dTfzying = dTfzyingsService.selectByid(product.getId());
		// 根据sku查询该产品的图片地址
		List<DTpic> pic = dTpicService.selectByPicIds(dTfzying.getFsku());
		
		
		
		

		ArrayList<String> arrayList2 = new ArrayList<String>();
		// 根据sku查询唯一的在线地址
				List<OnlineDownloadWithBLOBs> list = onlineservice.ImagesUnique(dTfzying.getFsku());
				for (OnlineDownloadWithBLOBs c : list) {
					// 根据唯一的在线地址查询一个本地地址
					List<OnlineDownloadWithBLOBs> lists = onlineservice.ImageLocal(c.getfOnlineUrl());
					for (OnlineDownloadWithBLOBs cd : lists) {
						if(cd.getfImagesUrl().split("F:/LibraryImage/").length==1) {
							/*
							 * 新的根据项目服务器存储的地址
							 */
							arrayList2.add(cd.getfImagesUrl().split("F:/LibraryImage/")[0]);  
						}else {
							/*
							 * 老版拼接死的地址
							 */
							arrayList2.add(cd.getfImagesUrl().split("F:/LibraryImage/")[1]);  
						}
					}
				}
		
		
		//System.out.println("arr"+arrayList2);
		
		
		
		
		
		
		List<DTstocks> stock = DTstocksService.selectBystockSku(dTfzying.getFsku());
		// fproduct.setId(product.getId());
		// Fproduct fproducts = fProductService.getProductByid(id);
		// 判断产品是否为空，并进行字符串截取
		if (dTfzying.getFpic() != null) {
			String str = dTfzying.getFpic();
			String[] strs = str.split(",");
			model.addObject("strs", strs);
		}
		// 判断语种是否为空，并进行字符串截取
		if (dTfzying.getFen() != null) {
			String ce = dTfzying.getFen();
			String[] fen = ce.split(",.");
			model.addObject("fen", fen);
		}
		// 获取session的名称
		dTfzying.setFrs6(auth.getName());
		Gson gson=new Gson();
		model.addObject("stock", stock);
		model.addObject("pic", gson.toJson(arrayList2));
		model.addObject("dTfzying", dTfzying);
		// model.addObject("fproducty", fproducts);

		model.setViewName("admin/product/Fright");
		return model;
	}

	// 带条件查询商品
	@RequestMapping(value = "/admin/productListAtAll")
	@ResponseBody
	public String productLists(DTfzyingWithBLOBs dTfzying, @RequestParam("price1") Integer price1,
			@RequestParam("price2") Integer price2, @RequestParam("updateTime1") String updateTime1,
			@RequestParam("updateTime2") String updateTime2) {
		/*
		 * System.out.println("传值==》" + fproduct + "price1=" + price1 + "price2=" +
		 * price2 + "updateTime1=" + updateTime1 + "updateTime2=" + updateTime2);
		 */
		System.out.println(dTfzying.getId());
		Gson gson = new Gson();
		List<DTfzyingWithBLOBs> productListAtAll = dTfzyingService.selectdTstockAtAll(dTfzying, price1, price2,
				updateTime1, updateTime2);
		String sa = gson.toJson(productListAtAll);
		return sa;
	}

	// 修改右边页面商品
	@RequestMapping(value = "/adminsdf/productUpdate", method = RequestMethod.POST, headers = "Accept=application/json")
	@ResponseBody
	public int asdfasg(@RequestBody DTfzyingsWithBLOBs dtfzings) throws ParseException {

		if (dtfzings.getFrs1().equals("") | dtfzings.getFrs1().equals("-1")) {
			dtfzings.setFrs1("0");
		}
		if (dtfzings.getFrs2().equals("") | dtfzings.getFrs2().equals("-1")) {
			dtfzings.setFrs2("0");
		}
		if (dtfzings.getFrs3().equals("") | dtfzings.getFrs3().equals("-1")) {
			dtfzings.setFrs3("0");
		}
		if (dtfzings.getFrs4().equals("") | dtfzings.getFrs4().equals("-1")) {
			dtfzings.setFrs4("0");
		}
		if (dtfzings.getFrs5().equals("") | dtfzings.getFrs5().equals("-1")) {
			dtfzings.setFrs5("0");
		}

		// Gson gson=new Gson();
		// String sa=gson.toJson(productListAtAll);
		DTfzyings st = new DTfzyings();

		return dTfzyingsService.updateProduct(dtfzings, st);

	}

	// 修改变体商品
	@RequestMapping(value = "/Stock/productUpdate", method = RequestMethod.POST, headers = "Accept=application/json")
	@ResponseBody
	public int Stock(@RequestBody DTstocks stocks) throws ParseException {

		if (stocks.getId() == null) {
			System.out.println("这是空变体内容===》" + stocks);
			return DTstocksService.nullStock(stocks);
		} else {
			System.out.println("这是变体内容===》" + stocks);
			return DTstocksService.addStock(stocks);
		}

	}

	
	// 删除主图
		@RequestMapping(value = "/admin/deletMainImgs", method = RequestMethod.POST, headers = "Accept=application/json")
		@ResponseBody
		public int deletMainImgs(@RequestBody OnlineDownloadWithBLOBs online) throws ParseException {
			//根据sku和本地图片去查找在线
			System.out.println(online.getfSku());
			List<OnlineDownloadWithBLOBs> onlines=onlineservice.selectOnline(online);
				
			for(OnlineDownloadWithBLOBs c:onlines) {
				//根据在线地址去查找所有本地图片路径
				List<OnlineDownloadWithBLOBs> lo=onlineservice.selectlo(c.getfOnlineUrl(),c.getfSku());
				for(OnlineDownloadWithBLOBs d:lo) {
					//删除所有本地的图片路径
					onlineservice.delet(d);
				} 
			}
			return 1;

		}
	//查询主图selMainImgs
		@RequestMapping(value = "/admin/selMainImgs", method = RequestMethod.POST, headers = "Accept=application/json")
		@ResponseBody
		public ArrayList<String> selMainImgs(@RequestBody OnlineDownloadWithBLOBs online) throws ParseException {
			ArrayList<String> arrayList2 = new ArrayList<String>();
			// 根据sku查询唯一的在线地址
					List<OnlineDownloadWithBLOBs> list = onlineservice.ImagesUnique(online.getfSku());
					for (OnlineDownloadWithBLOBs c : list) {
						// 根据唯一的在线地址查询一个本地地址
						List<OnlineDownloadWithBLOBs> lists = onlineservice.ImageLocal(c.getfOnlineUrl());
						for (OnlineDownloadWithBLOBs cd : lists) {
							arrayList2.add(cd.getfImagesUrl().split("F:/LibraryImage/")[1]);  
						}
					}
					System.out.println(list);
			return arrayList2;

		}
	// 删除右边页面商品
	@RequestMapping(value = "/admin/productDelete")
	@ResponseBody
	public int productdelete(DTfzyingsWithBLOBs dtfzings) {
		// System.out.println("传值==》"+fproduct);
		// Gson gson=new Gson();
		int i = dTfzyingsService.deleteProduct(dtfzings.getId());
		System.out.println(i);
		// String sa=gson.toJson(productListAtAll);
		return i;
	}
	
	/*
	 * 图片修改
	 */
	@RequestMapping(value = "/admin/saveViewImgs", method = RequestMethod.POST, headers = "Accept=application/json")
	@ResponseBody
	public int saveViewImgs(@RequestBody DTstocks stocks) {
		System.out.println(stocks);
		
		return DTstocksService.updateStocks(stocks);
		
	}
	
	@RequestMapping(value = "/admin/product/addEdit{id}", method = RequestMethod.GET)
	public ModelAndView editUser(@ModelAttribute ProductRelation product, @PathVariable("id") Integer productId)
			throws IOException {
		ModelAndView model = new ModelAndView();
		// System.out.println(productId);
		Map<Integer, String> categoryMap = new TreeMap<Integer, String>();
		// 取得商品分类信息
		List<ProductCategory> productCategoryList = productCategoryService.getProductCategory();
		if (productCategoryList != null && productCategoryList.size() > 0) {
			for (ProductCategory productCategory : productCategoryList) {
				categoryMap.put(productCategory.getId(), productCategory.getName());
			}
		}
		model.addObject("categoryMap", categoryMap);
		List<Option> optionList = optionService.getOption();
		model.addObject("optionList", optionList);
		if (productId != null) {
			product = productService.getProductInfoById(productId);
			ObjectMapper objMapper = new ObjectMapper();
			List<ProductOptionInfo> productOptionInfo = productService.getOptionByProductId(productId);
			model.addObject("productOptionInfo", objMapper.writeValueAsString(productOptionInfo));
			List<Sku> skuList = productService.getProductOptionInfoByProductId(productId);
			model.addObject("skuVOInfoList", skuList);
		} else {
			product.setHot(1);// 默认为热销商品
			product.setInventoryFlag(0);// 默认为更新库存
		}
		Fproduct f = fProductService.selectByPrimaryKey(productId);
		model.addObject("fproduct", f);
		model.addObject("product", product);
		model.setViewName("admin/product/productInfoEdit");
		return model;
	}

	@RequestMapping(value = "/admin/product/save", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> saveProduct(@RequestBody ProductRelation product)
			throws IllegalAccessException, InvocationTargetException {
		int i = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			product.setUpdateUserName(UserUtils.getUserName());
			i = productService.saveProductInfo(product);
			if (i > 0) {
				map.put("error", "0"); // 成功
				map.put("data", product); // 数据
			} else {
				map.put("error", "-1"); // 失败
			}
		} catch (Exception e) {
			map.put("error", "-1"); // 失败
		}
		return map;
	}

	@RequestMapping(value = "/admin/productInfoDataTable", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> productInfoDataTable(PageInformation pageInfo, Product product) {
		return productService.getProductInfoByCondition(pageInfo, product);
	}

	@RequestMapping(value = "/admin/product/option/value", method = RequestMethod.POST)
	@ResponseBody
	public List<SkuVOInfo> getOptionValue(@RequestBody List<Integer> idList) throws ParseException {
		return optionService.getOptionByOptionId(idList);
	}

	@RequestMapping(value = "/admin/product/save/sku", method = RequestMethod.POST)
	@ResponseBody
	public AjaxResult saveSku(@RequestBody ProductRelation productRelation) throws ParseException {
		return skuService.saveSku(productRelation);
	}

	// 添加一个数据
	@RequestMapping(value = "/admin/saddsproduct", method = RequestMethod.POST)
	@ResponseBody
	public AjaxResult productadd(@RequestBody DTfzyingWithBLOBs dtfzing) throws ParseException {
		DTstock dTstock = new DTstock();
		for (int i = 0; i < dtfzing.getY().length; i++) {
			// 添加颜色
			String color = dtfzing.getY()[i].getFcolor();
			dTstock.setFcolor(color);
			// 添加编号
			String no = dtfzing.getY()[i].getFno();
			dTstock.setFno(no);
			// 添加价格
			String add = dtfzing.getY()[i].getFadd();
			dTstock.setFadd(add);
			// 添加数量
			Integer num = dtfzing.getY()[i].getFnum();
			dTstock.setFnum(num);
			// 添加图片地址
			String img = dtfzing.getY()[i].getFimg();
			dTstock.setFimg(img);
			// 添加尺码
			String fsize = dtfzing.getY()[i].getFsize();
			dTstock.setFsize(fsize);
			// 添加变体指向商品唯一id
			String fid = dtfzing.getY()[i].getFid();
			dTstock.setFid(fid);

			dTstockService.insertStock(dTstock);
		}
		return dTfzyingService.setinsert(dtfzing);
	}

}
