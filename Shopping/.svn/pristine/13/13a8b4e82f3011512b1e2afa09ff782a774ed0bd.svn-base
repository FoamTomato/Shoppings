package com.sybinal.shop.common;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Iterator;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;

import com.google.common.collect.Maps;
import com.sybinal.shop.controller.admin.EnumContentType;

public class Calculations {
	
	private static int HTTP_TIMEOUT = 10000;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*Map<String, String> head = Maps.newHashMap();
		Map<String,String> map=new HashMap<String,String>();
		map.put("weight", "300");
		map.put("country", "UK");
		map.put("shipping", "cm_hm_yg");
		Gson gson=new Gson();
		String data;
		try {
			data = doGet("http://192.168.1.172:5000/freight?weight=300&country=UK英国&shipping=cm_hm_yg", "",EnumContentType.JSON, 30000);
			System.out.println(data);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}// get请求
*/		//String data=interfaceUtil("460","GB","cm_it_hh","");
		//System.out.println(data);
		Pattern pattern = Pattern.compile("\\+.{21}");
		String i="小林 < v8gpmnpf6t5ypsd+A00135411ZI2YBJ2DU9VJ@marketplace.amazon.co.jp >";
		Matcher matcher = pattern.matcher(i);
		if (matcher.find()) {
			System.out.println(matcher.group(0));
			String t=i.replace(matcher.group(0), "");
			int c=t.lastIndexOf(">");
			int d=t.indexOf("<")+1;
			System.out.println(d+""+c);
			System.out.println(t.substring(d,c).replace(" ",""));
		}
		/*
		 * interfaceUtil("http://172.83.28.221:7001/NSRTRegistration/test/add.do",
		 * "id=8888888&name=99999999");
		 */// post请求
	}
	public static String los(String data1,String data2,String data3) throws Exception {
		return interfaceUtil(data1,data2,data3,"");
	}
	public static String doGet(String urlPath, String params, 
			EnumContentType contentType, Integer timeout) throws Exception {
		String method = "GET";
		Map<String, String> head = Maps.newHashMap();
		head.put("Content-Type", "application/json;charset=UTF-8");
		return doCall(urlPath, "GET", params, head, contentType, timeout);
	}
	/**
	 * 调用对方接口方法
	 * 
	 * @param path 对方或第三方提供的路径
	 * @param data 向对方或第三方发送的数据，大多数情况下给对方发送JSON数据让对方解析
	 */
	public static String interfaceUtil(String data1,String data2,String data3, String data) {
		String result="";
		try {//data1 重量 data2国家二字码 data3物流
			URL url = new URL("http://www.ec-sudo.com:5000/freight?weight="+data1+"&country="+data2+"&shipping="+data3);
			//URL url = new URL("http://192.168.1.172:8000/freight?weight="+data1+"&country="+data2+"&shipping="+data3);
			// 打开和url之间的连接
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			PrintWriter out = null;

			/** 设置URLConnection的参数和普通的请求属性****start ***/

			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("Content-type", "text/html;charset=UTF-8");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");

			/** 设置URLConnection的参数和普通的请求属性****end ***/

			// 设置是否向httpUrlConnection输出，设置是否从httpUrlConnection读入，此外发送post请求必须设置这两个
			// 最常用的Http请求无非是get和post，get请求可以获取静态页面，也可以把参数放在URL字串后面，传递给servlet，
			// post与get的 不同之处在于post的参数不是放在URL字串里面，而是放在http请求的正文内。
			conn.setDoOutput(true);
			conn.setDoInput(true);

			conn.setRequestMethod("GET");// GET和POST必须全大写
			/** GET方法请求*****start */
			/**
			 * 如果只是发送GET方式请求，使用connet方法建立和远程资源之间的实际连接即可；
			 * 如果发送POST方式的请求，需要获取URLConnection实例对应的输出流来发送请求参数。
			 */
			conn.connect();

			/** GET方法请求*****end */

			/*** POST方法请求****start */

			/*
			 * out = new PrintWriter(conn.getOutputStream());//获取URLConnection对象对应的输出流
			 * 
			 * out.print(data);//发送请求参数即数据
			 * 
			 * out.flush();//缓冲数据
			 */
			/*** POST方法请求****end */

			// 获取URLConnection对象对应的输入流
			InputStream is = conn.getInputStream();
			// 构造一个字符流缓存
			BufferedReader br = new BufferedReader(new InputStreamReader(is,"utf-8"));
			String str = "";
			while ((str = br.readLine()) != null) {
				str = new String(str.getBytes(), "utf-8");// 解决中文乱码问题
				//System.out.println(str);
				result=str;
			}
			// 关闭流
			is.close();
			// 断开连接，最好写上，disconnect是在底层tcp socket链接空闲时才切断。如果正在被其他线程使用就不切断。
			// 固定多线程的话，如果不disconnect，链接会增多，直到收发不出信息。写上disconnect后正常一些。
			conn.disconnect();
			//System.out.println("完整结束");
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	public static String doCall(String urlPath, String method, String params, Map<String, String> requestProperties,
			EnumContentType contentType, Integer timeout) throws Exception {
		HttpURLConnection httpConnection = null;

		String var16;
		try {
			URL url = new URL(urlPath);
			httpConnection = (HttpURLConnection) url.openConnection();
			httpConnection.setRequestMethod(method);
			httpConnection.setRequestProperty("Content-Type", contentType.getContentType());
			if (timeout == null || timeout == 0) {
				timeout = HTTP_TIMEOUT;
			}

			httpConnection.setConnectTimeout(timeout);
			httpConnection.setReadTimeout(timeout);
			if (requestProperties != null && requestProperties.keySet().size() > 0) {
				Iterator var8 = requestProperties.keySet().iterator();

				while (var8.hasNext()) {
					String key = (String) var8.next();
					httpConnection.setRequestProperty(key, requestProperties.get(key));
				}
			}

			httpConnection.setDoOutput(true);
			httpConnection.setDoInput(true);
			if (StringUtils.isNotEmpty(params)) {
				httpConnection.setRequestProperty("Content-Length", String.valueOf(params.length()));
				OutputStreamWriter outputStreamWriter = new OutputStreamWriter(httpConnection.getOutputStream(),
						"utf-8");
				outputStreamWriter.write(params);
				outputStreamWriter.flush();
				outputStreamWriter.close();
			}

			var16 = IOUtils.toString(httpConnection.getInputStream(), "utf-8");
		} catch (Exception var13) {
			throw var13;
		} finally {
			httpConnection.disconnect();
		}

		return var16;
	}
}
